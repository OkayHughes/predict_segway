#!/usr/bin/env python
import rospy
from pedes_predict.msg import Frame, FrameArray
import sensor_msgs.point_cloud2 as pc2
from sensor_msgs.msg import PointCloud2
from sensor_msgs.msg import PointField
from std_msgs.msg import Header
import matplotlib.pyplot as plt
from matplotlib.colors import ListedColormap
from matplotlib import cm
import numpy as np
import time
import struct
plt.ion()
plst = []
t = time.time()
gener = -1

width = 100
x = PointField("x", 0, 7,1)
y = PointField("y", 4, 7,1)
z = PointField("z", 8, 7,1)
r = PointField("r", 12, 7,1)
g = PointField("g", 16, 7,1)
b = PointField("b", 20, 7,1)
a = PointField("a", 24, 7,1)
fields = [x,y,z, r, g, b, a]

def callback(frames):
    global gener, plst, t
    if frames.generation != gener:
        plst = []
        t = time.time()
        gener = frames.generation

    plst.append(frames)


def display(pub):

    global plst, t
    if len(plst) == 0:
        return

    lst = [x.frames for x in plst]

    sum = lambda x: reduce(lambda x, y: x + y, x)
    pt = sum(lst)
    xs = sum([f.xs for f in pt])
    ys = sum([f.ys for f in pt])

    weights = sum([sum([[float(frame.time) for x in frame.weights] \
                                          for frame in frames.frames]) \
                                          for frames in plst]) 
    if len(weights) == 0:
        return

    mx = max(weights)
    mn = min(weights)
    if mx-mn == 0:
        return
    weights = [1 -(weight - mn)/(mx-mn) for weight in weights]

    #print weights


    vr = lambda x, w: cm.viridis(x)[w]
    data = [[x, y, -1, vr(w, 0), vr(w, 1), vr(w, 2), .5] for x, y, w in zip(xs, ys, weights)]

    header = Header()
    header.stamp = rospy.Time.now()
    header.frame_id = "/fotonic_link"

    rospy.loginfo("Time: {}".format(time.time() - t))
    if time.time() - t < 1:
        pub.publish(pc2.create_cloud(header, fields, data))
        
def listener():
    pub = rospy.Publisher('forecast/output', PointCloud2, queue_size= 10)
    rospy.loginfo("Started Publisher")


    # In ROS, nodes are uniquely named. If two nodes with the same
    # node are launched, the previous one is kicked off. The
    # anonymous=True flag means that rospy will choose a unique
    # name for our 'listener' node so that multiple listeners can
    # run simultaneously.

    rospy.init_node('processor', anonymous=True)

    rospy.Subscriber("forecast/intermediary", FrameArray, callback)
    rospy.loginfo("Started Listener")
    rate = rospy.Rate(30)
    # spin() simply keeps python from exiting until this node is stopped
    while not rospy.is_shutdown():
        #for key in dat.keys():
        #    litmus = sum([x == 0 for x in dat[key]])
        #    print "Key {}: {}".format(key, litmus)
        #    if litmus == 0:
        #        display(key)
        display(pub)

if __name__ == '__main__':
    listener()
